<<<<<<< HEAD
#sample properties
<<<<<<< HEAD
#Sun Apr 30 22:55:03 EDT 2017
jakeconroy=Jakeryan17
#sample properties
#Mon May 01 01:21:56 EDT 2017
jakeconroy=jakeconroy
=======
#Mon May 01 00:14:45 EDT 2017
asdfghjkl=asdfghjkl
#sample properties
#Mon May 01 00:22:03 EDT 2017
asdfghjkl=asdfghjkl
#sample properties
#Mon May 01 00:24:07 EDT 2017
asdfghjkl=asdfghjkl
#sample properties
#Mon May 01 00:27:54 EDT 2017
asdfghjkl=asdfghjkl
#sample properties
#Mon May 01 00:28:37 EDT 2017
asdfghjkl=asdfghjkl
#sample properties
#Mon May 01 00:31:03 EDT 2017
asdfghjkl=asdfghjkl
#sample properties
#Mon May 01 00:31:39 EDT 2017
asdfghjkl=asdfghjkl
#sample properties
#Mon May 01 00:34:17 EDT 2017
asdfghjkl=asdfghjkl
#sample properties
#Mon May 01 00:35:43 EDT 2017
asdfghjkl=asdfghjkl
#sample properties
#Mon May 01 00:37:57 EDT 2017
asdfghjkl=asdfghjkl
#sample properties
#Mon May 01 01:21:07 EDT 2017
bus.on(ChangeWealthEvent.CHANGE,\ (e)\ ->{if\ (isNotMainPlayer(e.getPlayer()))\ return;WealthType\ type\ \=\ e.getWealthType();if\ (wealth.containsKey(mainPlayer))\ {Map<WealthType,\ Integer>\ wealths\ \=\ wealth.get(mainPlayer);if\ (wealths.containsKey(type))\ {//System.out.println(wealths.get(type));if\ (wealths.get(type)\ <\ 0\ ||\ wealths.get(type)\ <\ Math.abs(e.getAmountChanged())){System.out.println("insufficient\ gold\ warning\ popup");bus.emit(new\ InsufficientGoldEvent(InsufficientGoldEvent.ANY));Stage\ warning\ \=\ new\ Stage();VBox\ root\ \=\ new\ VBox();Scene\ scene\ \=\ new\ Scene(root);Text\ \ text\ \=\ new\ Text("You\ don't\ have\ enough\ gold\ for\ this\ update.\ Sorry\!");Button\ close\ \=\ new\ Button("close");close.setOnAction(f\ ->\ {warning.close();});root.getChildren().addAll(text,\ close);warning.setScene(scene);warning.show();return;}wealths.put(type,\ wealths.get(type)\ +\ e.getAmountChanged());}else\ {wealths.put(type,\ e.getAmountChanged());}}else\ {Map<WealthType,\ Integer>\ wealths\ \=\ new\ HashMap<>();wealths.put(e.getWealthType(),\ e.getAmountChanged());wealth.put(mainPlayer,\ wealths);}});=bus.on(ChangeWealthEvent.CHANGE, (e) ->{if (isNotMainPlayer(e.getPlayer())) return;WealthType type \= e.getWealthType();if (wealth.containsKey(mainPlayer)) {Map<WealthType, Integer> wealths \= wealth.get(mainPlayer);if (wealths.containsKey(type)) {//System.out.println(wealths.get(type));if (wealths.get(type) < 0 || wealths.get(type) < Math.abs(e.getAmountChanged())){System.out.println("insufficient gold warning popup");bus.emit(new InsufficientGoldEvent(InsufficientGoldEvent.ANY));Stage warning \= new Stage();VBox root \= new VBox();Scene scene \= new Scene(root);Text  text \= new Text("You don't have enough gold for this update. Sorry\!");Button close \= new Button("close");close.setOnAction(f -> {warning.close();});root.getChildren().addAll(text, close);warning.setScene(scene);warning.show();return;}wealths.put(type, wealths.get(type) + e.getAmountChanged());}else {wealths.put(type, e.getAmountChanged());}}else {Map<WealthType, Integer> wealths \= new HashMap<>();wealths.put(e.getWealthType(), e.getAmountChanged());wealth.put(mainPlayer, wealths);}});
#sample properties
#Mon May 01 01:24:13 EDT 2017
bus.on(ChangeWealthEvent.CHANGE,\ (e)\ ->{if\ (isNotMainPlayer(e.getPlayer()))\ return;WealthType\ type\ \=\ e.getWealthType();if\ (wealth.containsKey(mainPlayer))\ {Map<WealthType,\ Integer>\ wealths\ \=\ wealth.get(mainPlayer);if\ (wealths.containsKey(type))\ {//System.out.println(wealths.get(type));if\ (wealths.get(type)\ <\ 0\ ||\ wealths.get(type)\ <\ Math.abs(e.getAmountChanged())){System.out.println("insufficient\ gold\ warning\ popup");bus.emit(new\ InsufficientGoldEvent(InsufficientGoldEvent.ANY));Stage\ warning\ \=\ new\ Stage();VBox\ root\ \=\ new\ VBox();Scene\ scene\ \=\ new\ Scene(root);Text\ \ text\ \=\ new\ Text("You\ don't\ have\ enough\ gold\ for\ this\ update.\ Sorry\!");Button\ close\ \=\ new\ Button("close");close.setOnAction(f\ ->\ {warning.close();});root.getChildren().addAll(text,\ close);warning.setScene(scene);warning.show();return;}wealths.put(type,\ wealths.get(type)\ +\ e.getAmountChanged());}else\ {wealths.put(type,\ e.getAmountChanged());}}else\ {Map<WealthType,\ Integer>\ wealths\ \=\ new\ HashMap<>();wealths.put(e.getWealthType(),\ e.getAmountChanged());wealth.put(mainPlayer,\ wealths);}});=bus.on(ChangeWealthEvent.CHANGE, (e) ->{if (isNotMainPlayer(e.getPlayer())) return;WealthType type \= e.getWealthType();if (wealth.containsKey(mainPlayer)) {Map<WealthType, Integer> wealths \= wealth.get(mainPlayer);if (wealths.containsKey(type)) {//System.out.println(wealths.get(type));if (wealths.get(type) < 0 || wealths.get(type) < Math.abs(e.getAmountChanged())){System.out.println("insufficient gold warning popup");bus.emit(new InsufficientGoldEvent(InsufficientGoldEvent.ANY));Stage warning \= new Stage();VBox root \= new VBox();Scene scene \= new Scene(root);Text  text \= new Text("You don't have enough gold for this update. Sorry\!");Button close \= new Button("close");close.setOnAction(f -> {warning.close();});root.getChildren().addAll(text, close);warning.setScene(scene);warning.show();return;}wealths.put(type, wealths.get(type) + e.getAmountChanged());}else {wealths.put(type, e.getAmountChanged());}}else {Map<WealthType, Integer> wealths \= new HashMap<>();wealths.put(e.getWealthType(), e.getAmountChanged());wealth.put(mainPlayer, wealths);}});
#sample properties
#Mon May 01 01:42:07 EDT 2017
if\ (path.contains(step))=if (path.contains(step))
#sample properties
#Mon May 01 01:43:57 EDT 2017
if\ (path.contains(step))=if (path.contains(step))
#sample properties
#Mon May 01 01:45:04 EDT 2017
if\ (path.contains(step))=if (path.contains(step))
#sample properties
#Mon May 01 01:46:19 EDT 2017
if\ (path.contains(step))=if (path.contains(step))
#sample properties
#Mon May 01 01:47:45 EDT 2017
if\ (path.contains(step))=if (path.contains(step))
#sample properties
#Mon May 01 01:49:25 EDT 2017
if\ (path.contains(step))=if (path.contains(step))
#sample properties
#Mon May 01 01:51:27 EDT 2017
"images/characters/Grass.jpg"="images/characters/Grass.jpg"
#sample properties
#Mon May 01 01:52:43 EDT 2017
"images/characters/Grass.jpg"="images/characters/Grass.jpg"
#sample properties
#Mon May 01 01:55:41 EDT 2017
"images/characters/Grass.jpg"="images/characters/Grass.jpg"
#sample properties
#Mon May 01 01:59:38 EDT 2017
"images/characters/Grass.jpg"="images/characters/Grass.jpg"
#sample properties
#Mon May 01 02:00:24 EDT 2017
"images/characters/Grass.jpg"="images/characters/Grass.jpg"
#sample properties
#Mon May 01 02:02:20 EDT 2017
"images/characters/Grass.jpg"="images/characters/Grass.jpg"
#sample properties
#Mon May 01 02:03:27 EDT 2017
"images/characters/Grass.jpg"="images/characters/Grass.jpg"
#sample properties
#Mon May 01 02:10:49 EDT 2017
bus.emit(new\ SpriteModelEvent(SpriteModelEvent.ADD,\ pathSprites));=bus.emit(new SpriteModelEvent(SpriteModelEvent.ADD, pathSprites));
#sample properties
#Mon May 01 02:11:09 EDT 2017
bus.emit(new\ SpriteModelEvent(SpriteModelEvent.ADD,\ pathSprites));=bus.emit(new SpriteModelEvent(SpriteModelEvent.ADD, pathSprites));
#sample properties
#Mon May 01 02:26:36 EDT 2017
//Queue<GamePoint>\ points\ \=\ pathFollower.getPath().getPath();//while\ (\!points.isEmpty()){//if\ (alreadyAdded.contains(points.peek()))\ continue;//Sprite\ step\ \=\ new\ Sprite();//step.addComponent(new\ Position(points.poll()));//LtubImage\ ltubimage\ \=\ new\ LtubImage("images/characters/Grass.jpg");//step.addComponent(new\ Images(ltubimage));//step.addComponent(new\ GameBus());//pathSprites.add(step);//}=//Queue<GamePoint> points \= pathFollower.getPath().getPath();//while (\!points.isEmpty()){//if (alreadyAdded.contains(points.peek())) continue;//Sprite step \= new Sprite();//step.addComponent(new Position(points.poll()));//LtubImage ltubimage \= new LtubImage("images/characters/Grass.jpg");//step.addComponent(new Images(ltubimage));//step.addComponent(new GameBus());//pathSprites.add(step);//}
#sample properties
#Mon May 01 02:28:51 EDT 2017
//Queue<GamePoint>\ points\ \=\ pathFollower.getPath().getPath();//while\ (\!points.isEmpty()){//if\ (alreadyAdded.contains(points.peek()))\ continue;//Sprite\ step\ \=\ new\ Sprite();//step.addComponent(new\ Position(points.poll()));//LtubImage\ ltubimage\ \=\ new\ LtubImage("images/characters/Grass.jpg");//step.addComponent(new\ Images(ltubimage));//step.addComponent(new\ GameBus());//pathSprites.add(step);//}=//Queue<GamePoint> points \= pathFollower.getPath().getPath();//while (\!points.isEmpty()){//if (alreadyAdded.contains(points.peek())) continue;//Sprite step \= new Sprite();//step.addComponent(new Position(points.poll()));//LtubImage ltubimage \= new LtubImage("images/characters/Grass.jpg");//step.addComponent(new Images(ltubimage));//step.addComponent(new GameBus());//pathSprites.add(step);//}
#sample properties
#Mon May 01 02:33:37 EDT 2017
//Queue<GamePoint>\ points\ \=\ pathFollower.getPath().getPath();//while\ (\!points.isEmpty()){//if\ (alreadyAdded.contains(points.peek()))\ continue;//Sprite\ step\ \=\ new\ Sprite();//step.addComponent(new\ Position(points.poll()));//LtubImage\ ltubimage\ \=\ new\ LtubImage("images/characters/Grass.jpg");//step.addComponent(new\ Images(ltubimage));//step.addComponent(new\ GameBus());//pathSprites.add(step);//}=//Queue<GamePoint> points \= pathFollower.getPath().getPath();//while (\!points.isEmpty()){//if (alreadyAdded.contains(points.peek())) continue;//Sprite step \= new Sprite();//step.addComponent(new Position(points.poll()));//LtubImage ltubimage \= new LtubImage("images/characters/Grass.jpg");//step.addComponent(new Images(ltubimage));//step.addComponent(new GameBus());//pathSprites.add(step);//}
#sample properties
#Mon May 01 02:37:32 EDT 2017
//Queue<GamePoint>\ points\ \=\ pathFollower.getPath().getPath();//while\ (\!points.isEmpty()){//if\ (alreadyAdded.contains(points.peek()))\ continue;//Sprite\ step\ \=\ new\ Sprite();//step.addComponent(new\ Position(points.poll()));//LtubImage\ ltubimage\ \=\ new\ LtubImage("images/characters/Grass.jpg");//step.addComponent(new\ Images(ltubimage));//step.addComponent(new\ GameBus());//pathSprites.add(step);//}=//Queue<GamePoint> points \= pathFollower.getPath().getPath();//while (\!points.isEmpty()){//if (alreadyAdded.contains(points.peek())) continue;//Sprite step \= new Sprite();//step.addComponent(new Position(points.poll()));//LtubImage ltubimage \= new LtubImage("images/characters/Grass.jpg");//step.addComponent(new Images(ltubimage));//step.addComponent(new GameBus());//pathSprites.add(step);//}
>>>>>>> 81763944c844e7a7c9c8b8812e412bbf0e805a07
#sample properties
#Mon May 01 02:58:53 EDT 2017
jakeconroy=jakeconroy
#sample properties
#Mon May 01 03:00:55 EDT 2017
sprite.addComponent(new\ Position(100,\ 200,\ 0));//sprite.addComponent(new\ EventQueue());transferComponents.stream().forEach(c\ ->\ {if\ (c.getType().equals(Position.TYPE))\ {Position\ position\ \=\ (Position)\ c;double\ xPerc\ \=\ position.pos().x();double\ yPerc\ \=\ position.pos().y();double\ xPixel\ \=\ xPerc\ *\ 100\ *\ numCols;double\ yPixel\ \=\ yPerc\ *\ 100\ *\ numRows;Position\ newPosition\ \=\ new\ Position(xPixel,\ yPixel,\ position.heading());sprite.addComponent(newPosition);}});=sprite.addComponent(new Position(100, 200, 0));//sprite.addComponent(new EventQueue());transferComponents.stream().forEach(c -> {if (c.getType().equals(Position.TYPE)) {Position position \= (Position) c;double xPerc \= position.pos().x();double yPerc \= position.pos().y();double xPixel \= xPerc * 100 * numCols;double yPixel \= yPerc * 100 * numRows;Position newPosition \= new Position(xPixel, yPixel, position.heading());sprite.addComponent(newPosition);}});
#sample properties
#Mon May 01 03:04:22 EDT 2017
sprite.addComponent(new\ Position(100,\ 200,\ 0));//sprite.addComponent(new\ EventQueue());transferComponents.stream().forEach(c\ ->\ {if\ (c.getType().equals(Position.TYPE))\ {Position\ position\ \=\ (Position)\ c;double\ xPerc\ \=\ position.pos().x();double\ yPerc\ \=\ position.pos().y();double\ xPixel\ \=\ xPerc\ *\ 100\ *\ numCols;double\ yPixel\ \=\ yPerc\ *\ 100\ *\ numRows;Position\ newPosition\ \=\ new\ Position(xPixel,\ yPixel,\ position.heading());sprite.addComponent(newPosition);}});=sprite.addComponent(new Position(100, 200, 0));//sprite.addComponent(new EventQueue());transferComponents.stream().forEach(c -> {if (c.getType().equals(Position.TYPE)) {Position position \= (Position) c;double xPerc \= position.pos().x();double yPerc \= position.pos().y();double xPixel \= xPerc * 100 * numCols;double yPixel \= yPerc * 100 * numRows;Position newPosition \= new Position(xPixel, yPixel, position.heading());sprite.addComponent(newPosition);}});
#sample properties
#Mon May 01 03:05:39 EDT 2017
sprite.addComponent(new\ Position(100,\ 200,\ 0));//sprite.addComponent(new\ EventQueue());transferComponents.stream().forEach(c\ ->\ {if\ (c.getType().equals(Position.TYPE))\ {Position\ position\ \=\ (Position)\ c;double\ xPerc\ \=\ position.pos().x();double\ yPerc\ \=\ position.pos().y();double\ xPixel\ \=\ xPerc\ *\ 100\ *\ numCols;double\ yPixel\ \=\ yPerc\ *\ 100\ *\ numRows;Position\ newPosition\ \=\ new\ Position(xPixel,\ yPixel,\ position.heading());sprite.addComponent(newPosition);}});=sprite.addComponent(new Position(100, 200, 0));//sprite.addComponent(new EventQueue());transferComponents.stream().forEach(c -> {if (c.getType().equals(Position.TYPE)) {Position position \= (Position) c;double xPerc \= position.pos().x();double yPerc \= position.pos().y();double xPixel \= xPerc * 100 * numCols;double yPixel \= yPerc * 100 * numRows;Position newPosition \= new Position(xPixel, yPixel, position.heading());sprite.addComponent(newPosition);}});
#sample properties
#Mon May 01 03:07:44 EDT 2017
sprite.addComponent(new\ Position(100,\ 200,\ 0));//sprite.addComponent(new\ EventQueue());transferComponents.stream().forEach(c\ ->\ {if\ (c.getType().equals(Position.TYPE))\ {Position\ position\ \=\ (Position)\ c;double\ xPerc\ \=\ position.pos().x();double\ yPerc\ \=\ position.pos().y();double\ xPixel\ \=\ xPerc\ *\ 100\ *\ numCols;double\ yPixel\ \=\ yPerc\ *\ 100\ *\ numRows;Position\ newPosition\ \=\ new\ Position(xPixel,\ yPixel,\ position.heading());sprite.addComponent(newPosition);}});=sprite.addComponent(new Position(100, 200, 0));//sprite.addComponent(new EventQueue());transferComponents.stream().forEach(c -> {if (c.getType().equals(Position.TYPE)) {Position position \= (Position) c;double xPerc \= position.pos().x();double yPerc \= position.pos().y();double xPixel \= xPerc * 100 * numCols;double yPixel \= yPerc * 100 * numRows;Position newPosition \= new Position(xPixel, yPixel, position.heading());sprite.addComponent(newPosition);}});
#sample properties
#Mon May 01 03:08:18 EDT 2017
System.out.println("top");=System.out.println("top");
#sample properties
#Mon May 01 03:09:19 EDT 2017
System.out.println("top");=System.out.println("top");
#sample properties
#Mon May 01 03:12:16 EDT 2017
package\ newengine.sprite.components;import\ java.util.ArrayList;import\ java.util.List;import\ java.util.Stack;import\ commons.point.GamePoint;import\ gameDevelopmentInterface.Path;import\ helperAnnotations.ConstructorForDeveloper;import\ helperAnnotations.DeveloperMethod;import\ helperAnnotations.VariableName;import\ newengine.events.QueueEvent;import\ newengine.events.sprite.MoveEvent;import\ newengine.sprite.component.Component;import\ newengine.sprite.component.ComponentType;import\ newengine.utils.Target;public\ class\ PathFollower\ extends\ Component{public\ static\ final\ ComponentType<PathFollower>\ TYPE\ \=\ new\ ComponentType<>(PathFollower.class.getName());private\ Path\ path;private\ GamePoint\ finalPoint\ \=\ new\ GamePoint();@ConstructorForDeveloperpublic\ PathFollower(@VariableName(name\ \=\ "SelectedPath")\ Path\ path){this.path\=path;}@DeveloperMethodpublic\ void\ followPath(){}public\ Path\ getPath()\ {return\ this.path;}public\ void\ afterAdded(){if\ (path.getPath().peek()\ \=\=\ null){return;}GamePoint\ curr\ \=\ new\ GamePoint();Stack<GamePoint>\ holder\ \=\ new\ Stack<>();while\ (\!path.getPath().isEmpty()){curr\ \=\ path.getPath().poll();holder.push(curr);sprite.emit(new\ QueueEvent(QueueEvent.ADD,\ new\ MoveEvent(MoveEvent.START_POSITION,\ sprite,\ new\ Target(curr))));System.out.println(curr.x()\ +\ "\ "\ +\ curr.y());}}@Overridepublic\ ComponentType<?\ extends\ Component>\ getType()\ {return\ TYPE;}@Overridepublic\ Component\ clone()\ {return\ new\ PathFollower(path);}@Overridepublic\ Object[]\ getParameters()\ {//\ TODO\ Auto-generated\ method\ stubreturn\ null;}public\ GamePoint\ getFinalPoint()\ {return\ finalPoint;}}=package newengine.sprite.components;import java.util.ArrayList;import java.util.List;import java.util.Stack;import commons.point.GamePoint;import gameDevelopmentInterface.Path;import helperAnnotations.ConstructorForDeveloper;import helperAnnotations.DeveloperMethod;import helperAnnotations.VariableName;import newengine.events.QueueEvent;import newengine.events.sprite.MoveEvent;import newengine.sprite.component.Component;import newengine.sprite.component.ComponentType;import newengine.utils.Target;public class PathFollower extends Component{public static final ComponentType<PathFollower> TYPE \= new ComponentType<>(PathFollower.class.getName());private Path path;private GamePoint finalPoint \= new GamePoint();@ConstructorForDeveloperpublic PathFollower(@VariableName(name \= "SelectedPath") Path path){this.path\=path;}@DeveloperMethodpublic void followPath(){}public Path getPath() {return this.path;}public void afterAdded(){if (path.getPath().peek() \=\= null){return;}GamePoint curr \= new GamePoint();Stack<GamePoint> holder \= new Stack<>();while (\!path.getPath().isEmpty()){curr \= path.getPath().poll();holder.push(curr);sprite.emit(new QueueEvent(QueueEvent.ADD, new MoveEvent(MoveEvent.START_POSITION, sprite, new Target(curr))));System.out.println(curr.x() + " " + curr.y());}}@Overridepublic ComponentType<? extends Component> getType() {return TYPE;}@Overridepublic Component clone() {return new PathFollower(path);}@Overridepublic Object[] getParameters() {// TODO Auto-generated method stubreturn null;}public GamePoint getFinalPoint() {return finalPoint;}}
#sample properties
#Mon May 01 03:14:21 EDT 2017
package\ newengine.sprite.components;import\ java.util.ArrayList;import\ java.util.List;import\ java.util.Stack;import\ commons.point.GamePoint;import\ gameDevelopmentInterface.Path;import\ helperAnnotations.ConstructorForDeveloper;import\ helperAnnotations.DeveloperMethod;import\ helperAnnotations.VariableName;import\ newengine.events.QueueEvent;import\ newengine.events.sprite.MoveEvent;import\ newengine.sprite.component.Component;import\ newengine.sprite.component.ComponentType;import\ newengine.utils.Target;public\ class\ PathFollower\ extends\ Component{public\ static\ final\ ComponentType<PathFollower>\ TYPE\ \=\ new\ ComponentType<>(PathFollower.class.getName());private\ Path\ path;private\ GamePoint\ finalPoint\ \=\ new\ GamePoint();@ConstructorForDeveloperpublic\ PathFollower(@VariableName(name\ \=\ "SelectedPath")\ Path\ path){this.path\=path;}@DeveloperMethodpublic\ void\ followPath(){}public\ Path\ getPath()\ {return\ this.path;}public\ void\ afterAdded(){if\ (path.getPath().peek()\ \=\=\ null){return;}GamePoint\ curr\ \=\ new\ GamePoint();Stack<GamePoint>\ holder\ \=\ new\ Stack<>();while\ (\!path.getPath().isEmpty()){curr\ \=\ path.getPath().poll();holder.push(curr);sprite.emit(new\ QueueEvent(QueueEvent.ADD,\ new\ MoveEvent(MoveEvent.START_POSITION,\ sprite,\ new\ Target(curr))));System.out.println(curr.x()\ +\ "\ "\ +\ curr.y());}}@Overridepublic\ ComponentType<?\ extends\ Component>\ getType()\ {return\ TYPE;}@Overridepublic\ Component\ clone()\ {return\ new\ PathFollower(path);}@Overridepublic\ Object[]\ getParameters()\ {//\ TODO\ Auto-generated\ method\ stubreturn\ null;}public\ GamePoint\ getFinalPoint()\ {return\ finalPoint;}}=package newengine.sprite.components;import java.util.ArrayList;import java.util.List;import java.util.Stack;import commons.point.GamePoint;import gameDevelopmentInterface.Path;import helperAnnotations.ConstructorForDeveloper;import helperAnnotations.DeveloperMethod;import helperAnnotations.VariableName;import newengine.events.QueueEvent;import newengine.events.sprite.MoveEvent;import newengine.sprite.component.Component;import newengine.sprite.component.ComponentType;import newengine.utils.Target;public class PathFollower extends Component{public static final ComponentType<PathFollower> TYPE \= new ComponentType<>(PathFollower.class.getName());private Path path;private GamePoint finalPoint \= new GamePoint();@ConstructorForDeveloperpublic PathFollower(@VariableName(name \= "SelectedPath") Path path){this.path\=path;}@DeveloperMethodpublic void followPath(){}public Path getPath() {return this.path;}public void afterAdded(){if (path.getPath().peek() \=\= null){return;}GamePoint curr \= new GamePoint();Stack<GamePoint> holder \= new Stack<>();while (\!path.getPath().isEmpty()){curr \= path.getPath().poll();holder.push(curr);sprite.emit(new QueueEvent(QueueEvent.ADD, new MoveEvent(MoveEvent.START_POSITION, sprite, new Target(curr))));System.out.println(curr.x() + " " + curr.y());}}@Overridepublic ComponentType<? extends Component> getType() {return TYPE;}@Overridepublic Component clone() {return new PathFollower(path);}@Overridepublic Object[] getParameters() {// TODO Auto-generated method stubreturn null;}public GamePoint getFinalPoint() {return finalPoint;}}
#sample properties
#Mon May 01 03:15:27 EDT 2017
Sprite\ sprite\ \=\ new\ Sprite();\ transferComponents.add(0,\ new\ EventQueue());System.out.println("constructed\ in\ translate\:\ "\ +\ sprite);sprite.addComponent(new\ Position(100,200,0));sprite.addComponent(new\ EventQueue());transferComponents.stream().forEach(\ c->{if(c.getType().equals(Position.TYPE)){Position\ position\ \=\ (Position)c;double\ xPerc\ \=\ position.pos().x();double\ yPerc\ \=\ position.pos().y();double\ xPixel\ \=\ xPerc\ *\ 100\ *\ numCols;double\ yPixel\ \=\ yPerc\ *\ 100\ *\ numRows;Position\ newPosition\ \=\ new\ Position(xPixel,\ yPixel,\ position.heading());sprite.addComponent(newPosition);}});for\ (Component\ comp\:\ transferComponents){//System.out.println(comp.getType().getType());if\ (comp.getType().equals(Images.TYPE)){sprite.addComponent(comp);}}transferComponents.stream().forEach(component\ ->\ {//if\ (component.getType()\ \!\=\ Position.TYPE\ ||\ component.getType()\ \!\=\ Images.TYPE)\ {sprite.addComponent(component);//}});return\ sprite;=Sprite sprite \= new Sprite(); transferComponents.add(0, new EventQueue());System.out.println("constructed in translate\: " + sprite);sprite.addComponent(new Position(100,200,0));sprite.addComponent(new EventQueue());transferComponents.stream().forEach( c->{if(c.getType().equals(Position.TYPE)){Position position \= (Position)c;double xPerc \= position.pos().x();double yPerc \= position.pos().y();double xPixel \= xPerc * 100 * numCols;double yPixel \= yPerc * 100 * numRows;Position newPosition \= new Position(xPixel, yPixel, position.heading());sprite.addComponent(newPosition);}});for (Component comp\: transferComponents){//System.out.println(comp.getType().getType());if (comp.getType().equals(Images.TYPE)){sprite.addComponent(comp);}}transferComponents.stream().forEach(component -> {//if (component.getType() \!\= Position.TYPE || component.getType() \!\= Images.TYPE) {sprite.addComponent(component);//}});return sprite;
#sample properties
#Mon May 01 03:16:21 EDT 2017
Sprite\ sprite\ \=\ new\ Sprite();\ transferComponents.add(0,\ new\ EventQueue());System.out.println("constructed\ in\ translate\:\ "\ +\ sprite);sprite.addComponent(new\ Position(100,200,0));sprite.addComponent(new\ EventQueue());transferComponents.stream().forEach(\ c->{if(c.getType().equals(Position.TYPE)){Position\ position\ \=\ (Position)c;double\ xPerc\ \=\ position.pos().x();double\ yPerc\ \=\ position.pos().y();double\ xPixel\ \=\ xPerc\ *\ 100\ *\ numCols;double\ yPixel\ \=\ yPerc\ *\ 100\ *\ numRows;Position\ newPosition\ \=\ new\ Position(xPixel,\ yPixel,\ position.heading());sprite.addComponent(newPosition);}});for\ (Component\ comp\:\ transferComponents){//System.out.println(comp.getType().getType());if\ (comp.getType().equals(Images.TYPE)){sprite.addComponent(comp);}}transferComponents.stream().forEach(component\ ->\ {//if\ (component.getType()\ \!\=\ Position.TYPE\ ||\ component.getType()\ \!\=\ Images.TYPE)\ {sprite.addComponent(component);//}});return\ sprite;=Sprite sprite \= new Sprite(); transferComponents.add(0, new EventQueue());System.out.println("constructed in translate\: " + sprite);sprite.addComponent(new Position(100,200,0));sprite.addComponent(new EventQueue());transferComponents.stream().forEach( c->{if(c.getType().equals(Position.TYPE)){Position position \= (Position)c;double xPerc \= position.pos().x();double yPerc \= position.pos().y();double xPixel \= xPerc * 100 * numCols;double yPixel \= yPerc * 100 * numRows;Position newPosition \= new Position(xPixel, yPixel, position.heading());sprite.addComponent(newPosition);}});for (Component comp\: transferComponents){//System.out.println(comp.getType().getType());if (comp.getType().equals(Images.TYPE)){sprite.addComponent(comp);}}transferComponents.stream().forEach(component -> {//if (component.getType() \!\= Position.TYPE || component.getType() \!\= Images.TYPE) {sprite.addComponent(component);//}});return sprite;
#sample properties
#Mon May 01 03:18:26 EDT 2017
Sprite\ sprite\ \=\ new\ Sprite();\ transferComponents.add(0,\ new\ EventQueue());System.out.println("constructed\ in\ translate\:\ "\ +\ sprite);sprite.addComponent(new\ Position(100,200,0));sprite.addComponent(new\ EventQueue());transferComponents.stream().forEach(\ c->{if(c.getType().equals(Position.TYPE)){Position\ position\ \=\ (Position)c;double\ xPerc\ \=\ position.pos().x();double\ yPerc\ \=\ position.pos().y();double\ xPixel\ \=\ xPerc\ *\ 100\ *\ numCols;double\ yPixel\ \=\ yPerc\ *\ 100\ *\ numRows;Position\ newPosition\ \=\ new\ Position(xPixel,\ yPixel,\ position.heading());sprite.addComponent(newPosition);}});for\ (Component\ comp\:\ transferComponents){//System.out.println(comp.getType().getType());if\ (comp.getType().equals(Images.TYPE)){sprite.addComponent(comp);}}transferComponents.stream().forEach(component\ ->\ {//if\ (component.getType()\ \!\=\ Position.TYPE\ ||\ component.getType()\ \!\=\ Images.TYPE)\ {sprite.addComponent(component);//}});return\ sprite;=Sprite sprite \= new Sprite(); transferComponents.add(0, new EventQueue());System.out.println("constructed in translate\: " + sprite);sprite.addComponent(new Position(100,200,0));sprite.addComponent(new EventQueue());transferComponents.stream().forEach( c->{if(c.getType().equals(Position.TYPE)){Position position \= (Position)c;double xPerc \= position.pos().x();double yPerc \= position.pos().y();double xPixel \= xPerc * 100 * numCols;double yPixel \= yPerc * 100 * numRows;Position newPosition \= new Position(xPixel, yPixel, position.heading());sprite.addComponent(newPosition);}});for (Component comp\: transferComponents){//System.out.println(comp.getType().getType());if (comp.getType().equals(Images.TYPE)){sprite.addComponent(comp);}}transferComponents.stream().forEach(component -> {//if (component.getType() \!\= Position.TYPE || component.getType() \!\= Images.TYPE) {sprite.addComponent(component);//}});return sprite;
=======
>>>>>>> 738cf5a857b018d998841cf40048757b3d176235
#sample properties
#Mon May 01 03:27:50 EDT 2017
Sprite\ sprite\ \=\ new\ Sprite();\ transferComponents.add(0,\ new\ EventQueue());System.out.println("constructed\ in\ translate\:\ "\ +\ sprite);sprite.addComponent(new\ Position(100,200,0));sprite.addComponent(new\ EventQueue());transferComponents.stream().forEach(\ c->{if(c.getType().equals(Position.TYPE)){Position\ position\ \=\ (Position)c;double\ xPerc\ \=\ position.pos().x();double\ yPerc\ \=\ position.pos().y();double\ xPixel\ \=\ xPerc\ *\ 100\ *\ numCols;double\ yPixel\ \=\ yPerc\ *\ 100\ *\ numRows;Position\ newPosition\ \=\ new\ Position(xPixel,\ yPixel,\ position.heading());sprite.addComponent(newPosition);}});for\ (Component\ comp\:\ transferComponents){//System.out.println(comp.getType().getType());if\ (comp.getType().equals(Images.TYPE)){sprite.addComponent(comp);}}transferComponents.stream().forEach(component\ ->\ {//if\ (component.getType()\ \!\=\ Position.TYPE\ ||\ component.getType()\ \!\=\ Images.TYPE)\ {sprite.addComponent(component);//}});return\ sprite;=Sprite sprite \= new Sprite(); transferComponents.add(0, new EventQueue());System.out.println("constructed in translate\: " + sprite);sprite.addComponent(new Position(100,200,0));sprite.addComponent(new EventQueue());transferComponents.stream().forEach( c->{if(c.getType().equals(Position.TYPE)){Position position \= (Position)c;double xPerc \= position.pos().x();double yPerc \= position.pos().y();double xPixel \= xPerc * 100 * numCols;double yPixel \= yPerc * 100 * numRows;Position newPosition \= new Position(xPixel, yPixel, position.heading());sprite.addComponent(newPosition);}});for (Component comp\: transferComponents){//System.out.println(comp.getType().getType());if (comp.getType().equals(Images.TYPE)){sprite.addComponent(comp);}}transferComponents.stream().forEach(component -> {//if (component.getType() \!\= Position.TYPE || component.getType() \!\= Images.TYPE) {sprite.addComponent(component);//}});return sprite;
#sample properties
#Mon May 01 03:29:42 EDT 2017
Sprite\ sprite\ \=\ new\ Sprite();\ transferComponents.add(0,\ new\ EventQueue());System.out.println("constructed\ in\ translate\:\ "\ +\ sprite);sprite.addComponent(new\ Position(100,200,0));sprite.addComponent(new\ EventQueue());transferComponents.stream().forEach(\ c->{if(c.getType().equals(Position.TYPE)){Position\ position\ \=\ (Position)c;double\ xPerc\ \=\ position.pos().x();double\ yPerc\ \=\ position.pos().y();double\ xPixel\ \=\ xPerc\ *\ 100\ *\ numCols;double\ yPixel\ \=\ yPerc\ *\ 100\ *\ numRows;Position\ newPosition\ \=\ new\ Position(xPixel,\ yPixel,\ position.heading());sprite.addComponent(newPosition);}});for\ (Component\ comp\:\ transferComponents){//System.out.println(comp.getType().getType());if\ (comp.getType().equals(Images.TYPE)){sprite.addComponent(comp);}}transferComponents.stream().forEach(component\ ->\ {//if\ (component.getType()\ \!\=\ Position.TYPE\ ||\ component.getType()\ \!\=\ Images.TYPE)\ {sprite.addComponent(component);//}});return\ sprite;=Sprite sprite \= new Sprite(); transferComponents.add(0, new EventQueue());System.out.println("constructed in translate\: " + sprite);sprite.addComponent(new Position(100,200,0));sprite.addComponent(new EventQueue());transferComponents.stream().forEach( c->{if(c.getType().equals(Position.TYPE)){Position position \= (Position)c;double xPerc \= position.pos().x();double yPerc \= position.pos().y();double xPixel \= xPerc * 100 * numCols;double yPixel \= yPerc * 100 * numRows;Position newPosition \= new Position(xPixel, yPixel, position.heading());sprite.addComponent(newPosition);}});for (Component comp\: transferComponents){//System.out.println(comp.getType().getType());if (comp.getType().equals(Images.TYPE)){sprite.addComponent(comp);}}transferComponents.stream().forEach(component -> {//if (component.getType() \!\= Position.TYPE || component.getType() \!\= Images.TYPE) {sprite.addComponent(component);//}});return sprite;
#sample properties
#Mon May 01 03:31:31 EDT 2017
Sprite\ sprite\ \=\ new\ Sprite();\ transferComponents.add(0,\ new\ EventQueue());System.out.println("constructed\ in\ translate\:\ "\ +\ sprite);sprite.addComponent(new\ Position(100,200,0));sprite.addComponent(new\ EventQueue());transferComponents.stream().forEach(\ c->{if(c.getType().equals(Position.TYPE)){Position\ position\ \=\ (Position)c;double\ xPerc\ \=\ position.pos().x();double\ yPerc\ \=\ position.pos().y();double\ xPixel\ \=\ xPerc\ *\ 100\ *\ numCols;double\ yPixel\ \=\ yPerc\ *\ 100\ *\ numRows;Position\ newPosition\ \=\ new\ Position(xPixel,\ yPixel,\ position.heading());sprite.addComponent(newPosition);}});for\ (Component\ comp\:\ transferComponents){//System.out.println(comp.getType().getType());if\ (comp.getType().equals(Images.TYPE)){sprite.addComponent(comp);}}transferComponents.stream().forEach(component\ ->\ {//if\ (component.getType()\ \!\=\ Position.TYPE\ ||\ component.getType()\ \!\=\ Images.TYPE)\ {sprite.addComponent(component);//}});return\ sprite;=Sprite sprite \= new Sprite(); transferComponents.add(0, new EventQueue());System.out.println("constructed in translate\: " + sprite);sprite.addComponent(new Position(100,200,0));sprite.addComponent(new EventQueue());transferComponents.stream().forEach( c->{if(c.getType().equals(Position.TYPE)){Position position \= (Position)c;double xPerc \= position.pos().x();double yPerc \= position.pos().y();double xPixel \= xPerc * 100 * numCols;double yPixel \= yPerc * 100 * numRows;Position newPosition \= new Position(xPixel, yPixel, position.heading());sprite.addComponent(newPosition);}});for (Component comp\: transferComponents){//System.out.println(comp.getType().getType());if (comp.getType().equals(Images.TYPE)){sprite.addComponent(comp);}}transferComponents.stream().forEach(component -> {//if (component.getType() \!\= Position.TYPE || component.getType() \!\= Images.TYPE) {sprite.addComponent(component);//}});return sprite;
#sample properties
#Mon May 01 03:41:42 EDT 2017
public\ static\ final\ String\ NUMBER_OF_LIVES\ \=\ "NUM_LIVES";public\ static\ final\ String\ BUILD_TOWER\ \=\ "BUILD_IN_GAME";public\ static\ final\ String\ NUMBER_OF_STARTING_GOLD\ \=\ "NUM_GOLD";public\ static\ final\ String\ LEVEL_COMPLETION_BONUS\ \=\ "LEVEL_COMPLETION";public\ static\ final\ String\ GAME_NAME\ \=\ "GAME_NAME";public\ static\ final\ String\ GAME_ICON\ \=\ "GAME_ICON";=public static final String NUMBER_OF_LIVES \= "NUM_LIVES";public static final String BUILD_TOWER \= "BUILD_IN_GAME";public static final String NUMBER_OF_STARTING_GOLD \= "NUM_GOLD";public static final String LEVEL_COMPLETION_BONUS \= "LEVEL_COMPLETION";public static final String GAME_NAME \= "GAME_NAME";public static final String GAME_ICON \= "GAME_ICON";
#sample properties
#Mon May 01 03:44:53 EDT 2017
public\ static\ final\ String\ NUMBER_OF_LIVES\ \=\ "NUM_LIVES";public\ static\ final\ String\ BUILD_TOWER\ \=\ "BUILD_IN_GAME";public\ static\ final\ String\ NUMBER_OF_STARTING_GOLD\ \=\ "NUM_GOLD";public\ static\ final\ String\ LEVEL_COMPLETION_BONUS\ \=\ "LEVEL_COMPLETION";public\ static\ final\ String\ GAME_NAME\ \=\ "GAME_NAME";public\ static\ final\ String\ GAME_ICON\ \=\ "GAME_ICON";=public static final String NUMBER_OF_LIVES \= "NUM_LIVES";public static final String BUILD_TOWER \= "BUILD_IN_GAME";public static final String NUMBER_OF_STARTING_GOLD \= "NUM_GOLD";public static final String LEVEL_COMPLETION_BONUS \= "LEVEL_COMPLETION";public static final String GAME_NAME \= "GAME_NAME";public static final String GAME_ICON \= "GAME_ICON";
#sample properties
#Mon May 01 03:52:28 EDT 2017
public\ static\ final\ String\ NUMBER_OF_LIVES\ \=\ "NUM_LIVES";public\ static\ final\ String\ BUILD_TOWER\ \=\ "BUILD_IN_GAME";public\ static\ final\ String\ NUMBER_OF_STARTING_GOLD\ \=\ "NUM_GOLD";public\ static\ final\ String\ LEVEL_COMPLETION_BONUS\ \=\ "LEVEL_COMPLETION";public\ static\ final\ String\ GAME_NAME\ \=\ "GAME_NAME";public\ static\ final\ String\ GAME_ICON\ \=\ "GAME_ICON";=public static final String NUMBER_OF_LIVES \= "NUM_LIVES";public static final String BUILD_TOWER \= "BUILD_IN_GAME";public static final String NUMBER_OF_STARTING_GOLD \= "NUM_GOLD";public static final String LEVEL_COMPLETION_BONUS \= "LEVEL_COMPLETION";public static final String GAME_NAME \= "GAME_NAME";public static final String GAME_ICON \= "GAME_ICON";
#sample properties
#Mon May 01 03:53:28 EDT 2017
public\ static\ final\ String\ NUMBER_OF_LIVES\ \=\ "NUM_LIVES";public\ static\ final\ String\ BUILD_TOWER\ \=\ "BUILD_IN_GAME";public\ static\ final\ String\ NUMBER_OF_STARTING_GOLD\ \=\ "NUM_GOLD";public\ static\ final\ String\ LEVEL_COMPLETION_BONUS\ \=\ "LEVEL_COMPLETION";public\ static\ final\ String\ GAME_NAME\ \=\ "GAME_NAME";public\ static\ final\ String\ GAME_ICON\ \=\ "GAME_ICON";=public static final String NUMBER_OF_LIVES \= "NUM_LIVES";public static final String BUILD_TOWER \= "BUILD_IN_GAME";public static final String NUMBER_OF_STARTING_GOLD \= "NUM_GOLD";public static final String LEVEL_COMPLETION_BONUS \= "LEVEL_COMPLETION";public static final String GAME_NAME \= "GAME_NAME";public static final String GAME_ICON \= "GAME_ICON";
#sample properties
#Mon May 01 03:56:45 EDT 2017
public\ static\ final\ String\ NUMBER_OF_LIVES\ \=\ "NUM_LIVES";public\ static\ final\ String\ BUILD_TOWER\ \=\ "BUILD_IN_GAME";public\ static\ final\ String\ NUMBER_OF_STARTING_GOLD\ \=\ "NUM_GOLD";public\ static\ final\ String\ LEVEL_COMPLETION_BONUS\ \=\ "LEVEL_COMPLETION";public\ static\ final\ String\ GAME_NAME\ \=\ "GAME_NAME";public\ static\ final\ String\ GAME_ICON\ \=\ "GAME_ICON";=public static final String NUMBER_OF_LIVES \= "NUM_LIVES";public static final String BUILD_TOWER \= "BUILD_IN_GAME";public static final String NUMBER_OF_STARTING_GOLD \= "NUM_GOLD";public static final String LEVEL_COMPLETION_BONUS \= "LEVEL_COMPLETION";public static final String GAME_NAME \= "GAME_NAME";public static final String GAME_ICON \= "GAME_ICON";
#sample properties
#Mon May 01 03:58:24 EDT 2017
public\ static\ final\ String\ NUMBER_OF_LIVES\ \=\ "NUM_LIVES";public\ static\ final\ String\ BUILD_TOWER\ \=\ "BUILD_IN_GAME";public\ static\ final\ String\ NUMBER_OF_STARTING_GOLD\ \=\ "NUM_GOLD";public\ static\ final\ String\ LEVEL_COMPLETION_BONUS\ \=\ "LEVEL_COMPLETION";public\ static\ final\ String\ GAME_NAME\ \=\ "GAME_NAME";public\ static\ final\ String\ GAME_ICON\ \=\ "GAME_ICON";=public static final String NUMBER_OF_LIVES \= "NUM_LIVES";public static final String BUILD_TOWER \= "BUILD_IN_GAME";public static final String NUMBER_OF_STARTING_GOLD \= "NUM_GOLD";public static final String LEVEL_COMPLETION_BONUS \= "LEVEL_COMPLETION";public static final String GAME_NAME \= "GAME_NAME";public static final String GAME_ICON \= "GAME_ICON";
#sample properties
#Mon May 01 04:00:04 EDT 2017
public\ static\ final\ String\ NUMBER_OF_LIVES\ \=\ "NUM_LIVES";public\ static\ final\ String\ BUILD_TOWER\ \=\ "BUILD_IN_GAME";public\ static\ final\ String\ NUMBER_OF_STARTING_GOLD\ \=\ "NUM_GOLD";public\ static\ final\ String\ LEVEL_COMPLETION_BONUS\ \=\ "LEVEL_COMPLETION";public\ static\ final\ String\ GAME_NAME\ \=\ "GAME_NAME";public\ static\ final\ String\ GAME_ICON\ \=\ "GAME_ICON";=public static final String NUMBER_OF_LIVES \= "NUM_LIVES";public static final String BUILD_TOWER \= "BUILD_IN_GAME";public static final String NUMBER_OF_STARTING_GOLD \= "NUM_GOLD";public static final String LEVEL_COMPLETION_BONUS \= "LEVEL_COMPLETION";public static final String GAME_NAME \= "GAME_NAME";public static final String GAME_ICON \= "GAME_ICON";
#sample properties
#Mon May 01 04:03:53 EDT 2017
vbTexts.getChildren().add(getText("Congratulations\!"));=vbTexts.getChildren().add(getText("Congratulations\!"));
#sample properties
#Mon May 01 04:05:52 EDT 2017
vbTexts.getChildren().add(getText("Congratulations\!"));=vbTexts.getChildren().add(getText("Congratulations\!"));
#sample properties
#Mon May 01 04:07:35 EDT 2017
vbTexts.getChildren().add(getText("Congratulations\!"));=vbTexts.getChildren().add(getText("Congratulations\!"));
#sample properties
#Mon May 01 04:08:42 EDT 2017
vbTexts.getChildren().add(getText("Congratulations\!"));=vbTexts.getChildren().add(getText("Congratulations\!"));
#sample properties
#Mon May 01 04:09:45 EDT 2017
vbTexts.getChildren().add(getText("Congratulations\!"));=vbTexts.getChildren().add(getText("Congratulations\!"));
#sample properties
#Mon May 01 04:12:47 EDT 2017
vbTexts.getChildren().add(getText("Congratulations\!"));=vbTexts.getChildren().add(getText("Congratulations\!"));
#sample properties
#Mon May 01 04:13:50 EDT 2017
vbTexts.getChildren().add(getText("Congratulations\!"));=vbTexts.getChildren().add(getText("Congratulations\!"));
#sample properties
#Mon May 01 04:21:54 EDT 2017
vbTexts.getChildren().add(getText("Congratulations\!"));=vbTexts.getChildren().add(getText("Congratulations\!"));
#sample properties
#Mon May 01 04:22:53 EDT 2017
vbTexts.getChildren().add(getText("Congratulations\!"));=vbTexts.getChildren().add(getText("Congratulations\!"));
#sample properties
#Mon May 01 04:27:42 EDT 2017
vbTexts.getChildren().add(getText("Congratulations\!"));=vbTexts.getChildren().add(getText("Congratulations\!"));
#sample properties
#Mon May 01 04:28:25 EDT 2017
vbTexts.getChildren().add(getText("Congratulations\!"));=vbTexts.getChildren().add(getText("Congratulations\!"));
#sample properties
#Mon May 01 04:31:09 EDT 2017
vbTexts.getChildren().add(getText("Congratulations\!"));=vbTexts.getChildren().add(getText("Congratulations\!"));
#sample properties
#Mon May 01 04:36:01 EDT 2017
vbTexts.getChildren().add(getText("Congratulations\!"));=vbTexts.getChildren().add(getText("Congratulations\!"));
